import os
import subprocess
import re
from pathlib import Path
import pysrt


def sanitize_title(title):
    # Only keep numbers, letters, Chinese characters, and spaces
    title = re.sub(r'[^\w\u4e00-\u9fff \d_-]', '', title)
    # Replace multiple spaces with a single space
    title = re.sub(r'\s+', ' ', title)
    return title


# 将输入路径后缀去除 添加新后缀
def set_suffix(input_path, audio_type):
    # 获取文件名（不包括扩展名）
    base_name = get_file_name_no_suffix(input_path)
    # 创建输出文件路径
    return f"{base_name}.{audio_type}"


# 获取文件名称(有后缀)
def get_file_name(file_path):
    return os.path.basename(file_path)


# 获取文件名称(无后缀)
def get_file_name_no_suffix(file_path):
    return os.path.splitext(os.path.basename(file_path))[0]


# 文件夹添加文件
def join_suffix(folder, file_url):
    return os.path.join(folder, file_url)


# 删除文件
def del_file(file_path):
    # 检查文件是否存在
    if os.path.exists(file_path):
        # 删除文件
        os.remove(file_path)


# 保存文本到文件
def save_text_file(content):
    file_name = "subtitle.srt"
    # Windows系统中"C盘/下载"文件夹的通用路径
    download_path = os.path.join('C:\\Users', os.getlogin(), 'Downloads')
    # 指定保存的Excel文件路径
    file_path = os.path.join(download_path, file_name)
    # 将字幕内容写入到文件
    with open(file_path, "w", encoding="utf-8") as file:
        file.write(content)
    return f"字幕文件已保存至: {file_path}"


# 读取文件内容
def read_text_file(file):
    if file is None:
        return ""
    with open(file.name, "r", encoding="utf-8") as f:
        content = f.read()
    return re.split(r'\n\n+', content.strip())


# 获取文件夹下所有文件名称
def get_chats():
    # 获取当前脚本所在目录，即项目根目录
    project_root = Path(__file__).resolve().parent.parent
    # 指定chats文件夹
    chats_folder = project_root / 'chats'
    # 确保 chats 文件夹存在
    if not os.path.exists(chats_folder):
        os.makedirs(chats_folder)
    # 初始化一个空列表来保存文件名
    filenames = []
    # 遍历文件夹中的每个文件
    for file_path in chats_folder.iterdir():
        # 只处理文件，跳过子目录
        if file_path.is_file():
            # 去除文件扩展名并将结果添加到列表
            file_path_stem = []
            file_path_stem.append(file_path.stem)
            file_path_stem.append("x")
            filenames.append(file_path_stem)
    return filenames


# 获取下载文件夹地址
def get_download_folder():
    if os.name == 'nt':  # Windows系统
        download_folder = os.path.join(os.getenv('USERPROFILE'), 'Downloads')
    elif os.name == 'posix':  # macOS和Linux系统
        download_folder = os.path.join(os.path.expanduser('~'), 'Downloads')
    else:
        raise OSError("Unsupported operating system")
    return download_folder


# 打开文件夹
def open_folder():
    # 获取当前脚本所在的文件夹路径
    # current_folder = os.path.dirname(os.path.abspath(__file__))
    # 获取下载文件夹地址
    download_path = get_download_folder()
    subprocess.run(['explorer', download_path])


def check_folder(target_file):
    # 分离文件路径和文件名
    folder_path, _ = os.path.split(target_file)
    # 检查文件夹是否存在,不存在返回False
    if not os.path.exists(folder_path):
        return False
    # 检查目标文件是否存在,不存在返回False
    if not os.path.exists(target_file):
        return False
    return True


# 路径判断
def check_output_path(output_path):
    if output_path is None or output_path == "":
        # output_path为空字符串和None返回faste
        return False
    if not os.path.exists(output_path):
        # output路径 不存在，函数返回 False
        return False
    if not os.path.isdir(output_path):
        # output_path 不是一个目录，函数返回 False
        return False
    if not os.access(output_path, os.R_OK | os.W_OK):
        # output_path 不是一个目录，函数返回 False
        return False
    return True


# srt转ass并保存到文件
def srt_to_ass(srt_content, ass_filename, font_size=20):
    # 从SRT字符串中加载字幕
    subs = pysrt.from_string(srt_content)

    # 定义ASS文件头部信息
    ass_header = f"""
[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: None
PlayResX: 1920
PlayResY: 1080

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,{font_size},&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
"""
    with open(ass_filename, 'w', encoding='utf-8-sig') as f:
        # 写入ASS头部
        f.write(ass_header)

        for sub in subs:
            # 转换时间戳为ASS兼容格式
            start = sub.start.to_time()
            end = sub.end.to_time()
            start_str = f"{start.hour:01}:{start.minute:02}:{start.second:02}.{int(start.microsecond / 1000):03}"
            end_str = f"{end.hour:01}:{end.minute:02}:{end.second:02}.{int(end.microsecond / 1000):03}"

            # 处理双行或多行字幕
            text_lines = sub.text.splitlines()
            formatted_text = r'\N'.join(text_lines)

            # 每个字幕条目
            line = f"Dialogue: 0,{start_str},{end_str},Default,,0,0,0,,{formatted_text}\n"
            f.write(line)
